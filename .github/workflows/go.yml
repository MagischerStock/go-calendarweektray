name: Go

on:
  push:
    tags:
      - 'v*.*.*' # Dies sorgt dafür, dass der Workflow bei Versionstags wie v1.0.0 ausgelöst wird
  workflow_dispatch: # Ermöglicht manuelles Auslösen

jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.23.2
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Get the current commit SHA
      id: vars
      run: echo "::set-output name=sha::$(git rev-parse --short HEAD)"

    - name: Get the current time
      id: time
      run: echo "::set-output name=time::$(date -u +'%Y-%m-%d %H:%M:%S')"

    - name: Get dependencies
      run: ./getdeps.cmd

    - name: Build
      run: go build -ldflags "`"-X main.semVer=${{ github.ref }} -X main.sha1ver=${{ steps.vars.outputs.sha }} -X main.buildTime=${{ steps.time.outputs.time }}\"`" -o Kalenderwoche.exe

    - name: Run tests
      run: ./test.cmd

    - name: Upload binary to pre-release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ./Kalenderwoche.exe
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Change pre-release to production ready if build succeeds
      if: success()
      run: |
        curl -X PATCH \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/releases/latest \
          -d '{"prerelease": false}'

    - name: Delete pre-release and tag if build fails
      if: failure()
      run: |
        $releaseId = (Invoke-RestMethod -Headers @{Authorization = "token $env:GITHUB_TOKEN"} `
                     -Uri "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}").id
                     
        Invoke-RestMethod -Method Delete -Headers @{Authorization = "token $env:GITHUB_TOKEN"} `
            -Uri "https://api.github.com/repos/${{ github.repository }}/releases/$releaseId"
        
        git tag -d ${{ github.ref_name }}
        git push --delete origin ${{ github.ref_name }}
      shell: pwsh

